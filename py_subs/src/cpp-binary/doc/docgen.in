#!/usr/bin/perl 
#

require "./document.pl";

(@ARGV == 1) or die "usage: genhtml.pl html\n";
 
$html  = shift;

$time = localtime;

# Command classes. Individual files require pointers
# to these to get into them.

%classes = (
	    'Programs'      => 'Programs.',
	    );

# now generate individual command documentation.

# normal programs

foreach $file ('binfo.cc', 'edisc.cc', 'wdsolve.cc'
	       ){
    document("../src/$file",$html,"html","html","");
}

# shell, Perl, python scripts

#foreach $file ('addaframe.csh', 'breakup.csh', 'copymask.pl', 'dummy.pl', 'extract_times.csh', 'fmatch.py', 'l3gain.pl',
#	       'loggen.csh', 'makebias.csh', 'missbias.py', 'mulaframe.csh', 'newreduce.pl', 'setup.pl', 
#	       'shiftaper.pl', 'splitr.pl', 'sumframes.csh', 'transform.pl', 'ucat.csh', 'uls.csh', 'ult2asc.pl', 
#	       'unique.py', 'updateaper.pl'){
#    document("../scripts/$file",$html,"html","html","#");
#}

# generate overall index file

open(INDEX, ">$html/index.html") or die "Could not open index file\n";
print INDEX <<END1;
<html>
<head>
<title>binary star software</title>
<link rel=stylesheet href="style.css" type="text/css">
</head>
<body>
<h1>binary, version ZzZzZ</h1>
<p>
This is the main page for documentation on the C++-based binary pacakage. This package is mainly a set of
functions for binary-related programs, e.g. computation of a binary separation. It does however support a few programs
axs well.

<p>
<table>
<tr><td><a href="Alphabet.html">Alphabetical</a></td>
<td>Alphabetical list of all programs.</td></tr>

<tr><td><a href="api/html/index.html">API docs</a></td>
<td>If you are interested in programming with the binary routines.</td></tr>

<tr><td><a href="http://deneb.astro.warwick.ac.uk/phsaap/software/binary.tar.gz">binary.tar.gz</a></td>
<td>gzipped tar file of the software to download.</td></tr>

</table>

<p><hr>
<address>Page generated $time</address>
</body></html>
END1
close(INDEX);


foreach $class (sort keys %classes){
    open(CLASS,">$html/$class.html") or die "Could not open html/$class.html\n";
    print CLASS "<html>\n";
    print CLASS "<head>\n";
    print CLASS "<title>$classes{$class}</title>\n";
    print CLASS "<link rel=stylesheet href=\"style.css\" type=\"text/css\">\n";
    print CLASS "</head>\n";
    print CLASS "<body>\n";
    print CLASS "<h1>$classes{$class}</h1>\n\n<p>\n";
    print CLASS "<table>\n";
    foreach $item (sort keys %index){
	$print = 0;
	foreach $clss (@{$index{$item}->{class}}){
	    if($clss eq $class){$print = 1;}
	}
	if($print){
	    print CLASS 
		"<tr><td><a href=\"$index{$item}->{file}\">".
		    "$item</a></td><td>".
			"$index{$item}->{description}</td>\n";
	}
    }
    print CLASS "</table><p><hr>\n";
    print CLASS "<address>Page generated $time</address>\n";
    print CLASS "</body></html>\n";
    close(CLASS);
}

# write alphabetical list of all commands.

open(ALPHA, ">$html/Alphabet.html") or 
    die "Could not open command list\n";
print ALPHA <<END4;
<html>
<head>
<title>binary software</title>
<link rel=stylesheet href="style.css" type="text/css">
</head>
<body>
<h1>binary software</h1>
<p>
This page gives links to the available programs.

<p>
<table>
END4

foreach $item (sort keys %index){
    print ALPHA 
	"<tr><td><a href=\"$index{$item}->{file}\">$item</a>".
	"</td><td>$index{$item}->{description}</td>\n";
}

print ALPHA "</table><p><hr>\n";
print ALPHA "<address>Page generated $time</address>\n";
print ALPHA "</body></html>\n";
close(ALPHA);

exit;











